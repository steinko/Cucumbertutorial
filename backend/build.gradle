 plugins {  
    id 'java'
    id 'application'
    id "se.thinkcode.cucumber-runner" version "0.0.8"
    id 'jacoco'
    id "org.sonarqube" version "2.7.1"
    id 'org.springframework.boot' version '2.1.8.RELEASE'
}

version = '0.0.1'
group = 'org.steinko.cucumbertutorial'

application {
    mainClassName = 'org.steinko.cucumbertutorial.WebServer'
}

sonarqube {
    properties {
		property "sonar.host.url","https://sonarcloud.io"
        property "sonar.sourceEncoding", "UTF-8"
		property "sonar.login", "43983a01ea79d77e7ce4931e989733cdcfb6ef47"
		property "sonar.projectKey", "Cucumbertutorial"
		property "sonar.organization" , "steinko-github"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
    }
}

repositories {
    jcenter()
}


cucumber {
    glue = 'classpath:org.steinko.cucumbertutorial.steps'
    plugin =  ['progress']
    strict = 'please'
    featurePath = 'backend/src/cucumberTest/resources/features/'
    main = 'io.cucumber.core.cli.Main'
}



test {
    useJUnitPlatform()
}

dependencies {
    testImplementation 'io.cucumber:cucumber-java:5.4.0'
    testImplementation 'io.cucumber:cucumber-junit:5.4.0'

    implementation 'org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE'
	testImplementation('org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.6.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.6.0")
}

jacocoTestReport {

    reports {
        xml.enabled true
        html.enabled false
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            
            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}

task javadocs(type: Javadoc) {
    group 'java docs'
    description  'generate java docs'

  source = sourceSets.main.allJava
}
