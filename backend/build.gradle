 plugins { 
    id 'jacoco'
    id "org.sonarqube" version "2.7.1"
    id 'org.springframework.boot' version '2.2.5.RELEASE'
}

sourceCompatibility = '11'

sonarqube {
    properties {
		property "sonar.host.url","https://sonarcloud.io"
        property "sonar.sourceEncoding", "UTF-8"
		property "sonar.login", "43983a01ea79d77e7ce4931e989733cdcfb6ef47"
		property "sonar.projectKey", "Cucumbertutorial"
		property "sonar.organization" , "steinko-github"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
    }
}


test {
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', true
}

dependencies {   
    implementation 'org.springframework.boot:spring-boot-starter-web:2.2.5.RELEASE'
	testImplementation 'org.springframework.boot:spring-boot-starter-test:2.2.5.RELEASE'
	testImplementation 'io.rest-assured:spring-mock-mvc:4.2.0'	
    testImplementation'com.epam.reportportal:agent-java-junit5:4.0.3'
    implementation 'com.epam.reportportal:logger-java-log4j:4.0.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.13.1'
    implementation 'org.apache.logging.log4j:log4j-api:2.13.1'   
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            
            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}

task javadocs(type: Javadoc) {
  group 'java docs'
  description  'generate java docs'

  source = sourceSets.main.allJava
}

configurations {
    backend
    }

artifacts {
        backend bootJar
    }
